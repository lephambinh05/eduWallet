const express = require('express');
const router = express.Router();
const Wallet = require('../models/Wallet');
const jwt = require('jsonwebtoken');

// Middleware ƒë·ªÉ verify JWT token
const verifyToken = (req, res, next) => {
  const authHeader = req.headers.authorization;
  console.log('üîê Auth header:', authHeader);
  
  const token = authHeader?.split(' ')[1];
  console.log('üîê Token:', token ? `${token.substring(0, 20)}...` : 'No token');
  
  if (!token) {
    console.log('‚ùå No token provided');
    return res.status(401).json({ error: 'Kh√¥ng c√≥ token x√°c th·ª±c' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
    console.log('‚úÖ Token decoded successfully:', { id: decoded.id, userId: decoded.userId });
    req.userId = decoded.id || decoded.userId; // Support both formats
    next();
  } catch (error) {
    console.log('‚ùå Token verification failed:', error.message);
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({ error: 'Token kh√¥ng h·ª£p l·ªá' });
    } else if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ error: 'Token ƒë√£ h·∫øt h·∫°n' });
    }
    return res.status(401).json({ error: 'L·ªói x√°c th·ª±c token' });
  }
};

// ‚úÖ L∆∞u v√≠ (idempotent - kh√¥ng th√™m tr√πng)
router.post('/save', verifyToken, async (req, res) => {
  const { address, chainId, network } = req.body;
  
  if (!address) {
    return res.status(400).json({ error: 'Thi·∫øu ƒë·ªãa ch·ªâ v√≠' });
  }

  try {
    // Normalize address to lowercase
    const normalizedAddress = address.toLowerCase();
    
    // T√¨m v√≠ hi·ªán c√≥ ho·∫∑c t·∫°o m·ªõi (upsert)
    const wallet = await Wallet.findOneAndUpdate(
      { address: normalizedAddress },
      { 
        connected: true,
        user_id: req.userId,
        chainId: chainId || 5080,
        network: network || 'Pione Zero',
        lastConnected: new Date()
      },
      { 
        new: true, 
        upsert: true 
      }
    );

    console.log('‚úÖ Wallet saved:', {
      address: wallet.address,
      userId: wallet.user_id,
      connected: wallet.connected
    });

    res.json({ 
      success: true, 
      wallet: {
        address: wallet.address,
        connected: wallet.connected,
        chainId: wallet.chainId,
        network: wallet.network,
        lastConnected: wallet.lastConnected
      }
    });
  } catch (error) {
    console.error('‚ùå Error saving wallet:', error);
    res.status(500).json({ error: 'L·ªói khi l∆∞u v√≠' });
  }
});

// ‚ùå X√≥a v√≠
router.post('/delete', verifyToken, async (req, res) => {
  const { address } = req.body;
  
  if (!address) {
    return res.status(400).json({ error: 'Thi·∫øu ƒë·ªãa ch·ªâ v√≠' });
  }

  try {
    const normalizedAddress = address.toLowerCase();
    
    // X√≥a v√≠ ho·∫∑c ƒë√°nh d·∫•u disconnected
    const result = await Wallet.findOneAndDelete({ 
      address: normalizedAddress,
      user_id: req.userId 
    });

    if (!result) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y v√≠ ƒë·ªÉ x√≥a' });
    }

    console.log('‚úÖ Wallet deleted:', {
      address: result.address,
      userId: result.user_id
    });

    res.json({ success: true });
  } catch (error) {
    console.error('‚ùå Error deleting wallet:', error);
    res.status(500).json({ error: 'L·ªói khi x√≥a v√≠' });
  }
});

// üîç Ki·ªÉm tra v√≠
router.post('/check', verifyToken, async (req, res) => {
  const { address } = req.body;
  
  if (!address) {
    return res.status(400).json({ error: 'Thi·∫øu ƒë·ªãa ch·ªâ v√≠' });
  }

  try {
    const normalizedAddress = address.toLowerCase();
    
    const wallet = await Wallet.findOne({ 
      address: normalizedAddress,
      user_id: req.userId 
    });

    res.json({ 
      exists: !!wallet, 
      wallet: wallet ? {
        address: wallet.address,
        connected: wallet.connected,
        chainId: wallet.chainId,
        network: wallet.network,
        lastConnected: wallet.lastConnected
      } : null
    });
  } catch (error) {
    console.error('‚ùå Error checking wallet:', error);
    res.status(500).json({ error: 'L·ªói khi ki·ªÉm tra v√≠' });
  }
});

// üìã L·∫•y t·∫•t c·∫£ v√≠ c·ªßa user
router.get('/user', verifyToken, async (req, res) => {
  try {
    const wallets = await Wallet.find({ 
      user_id: req.userId,
      connected: true 
    }).sort({ lastConnected: -1 });

    res.json({
      success: true,
      wallets: wallets.map(wallet => ({
        address: wallet.address,
        connected: wallet.connected,
        chainId: wallet.chainId,
        network: wallet.network,
        lastConnected: wallet.lastConnected
      }))
    });
  } catch (error) {
    console.error('‚ùå Error getting user wallets:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch v√≠' });
  }
});

module.exports = router;
